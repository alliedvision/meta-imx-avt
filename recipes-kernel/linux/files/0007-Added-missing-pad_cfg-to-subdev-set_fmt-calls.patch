From 3fcd4d9ac607aa730b9a03bc978fc9a08d0f0ebf Mon Sep 17 00:00:00 2001
From: Dennis Langenkamp <dennis.langenkamp@alliedvision.com>
Date: Mon, 14 Nov 2022 10:18:52 +0100
Subject: [PATCH 07/23] Added missing pad_cfg to subdev set_fmt calls.

---
 drivers/staging/media/imx/imx8-isi-cap.c      | 81 ++++++++++---------
 .../staging/media/imx/imx8-mipi-csi2-sam.c    | 20 ++++-
 2 files changed, 61 insertions(+), 40 deletions(-)

diff --git a/drivers/staging/media/imx/imx8-isi-cap.c b/drivers/staging/media/imx/imx8-isi-cap.c
index 9571f60090f5..56bab657c627 100644
--- a/drivers/staging/media/imx/imx8-isi-cap.c
+++ b/drivers/staging/media/imx/imx8-isi-cap.c
@@ -860,12 +860,13 @@ static int mxc_isi_cap_try_fmt_mplane(struct file *file, void *fh,
 	struct mxc_isi_cap_dev *isi_cap = video_drvdata(file);
 	struct v4l2_pix_format_mplane *pix = &f->fmt.pix_mp;
     struct v4l2_subdev_format src_fmt;
+    struct v4l2_subdev_pad_config *pad_cfg;
     struct media_pad *source_pad;
     struct v4l2_subdev *src_sd;
 	struct mxc_isi_fmt *fmt;
 	int bpl;
 	int i;
-    int ret;
+    int ret = 0;
 
 	dev_dbg(&isi_cap->pdev->dev, "%s\n", __func__);
 
@@ -892,50 +893,56 @@ static int mxc_isi_cap_try_fmt_mplane(struct file *file, void *fh,
     if (!src_sd)
         return -EINVAL;
 
+    pad_cfg = v4l2_subdev_alloc_pad_config(src_sd);
+    if (!pad_cfg)
+        return -ENOMEM;
+
     src_fmt.pad = source_pad->index;
     src_fmt.which = V4L2_SUBDEV_FORMAT_TRY;
     src_fmt.format.code = fmt->mbus_code;
-    src_fmt.format.width = pix->width;
-    src_fmt.format.height = pix->height;
-    ret = v4l2_subdev_call(src_sd, pad, set_fmt, NULL, &src_fmt);
+    v4l2_fill_mbus_format_mplane(&src_fmt.format,pix);
+    ret = v4l2_subdev_call(src_sd, pad, set_fmt, pad_cfg, &src_fmt);
     if (ret < 0 && ret != -ENOIOCTLCMD)
     {
         v4l2_err(&isi_cap->sd, "try remote fmt fail!\n");
-        return ret;
+    }
+    else
+    {
+        if (pix->width > ISI_4K)
+            pix->width = ISI_4K;
+        if (pix->height > ISI_8K)
+            pix->height = ISI_8K;
+
+        pix->num_planes = fmt->memplanes;
+        pix->pixelformat = fmt->fourcc;
+        pix->field = V4L2_FIELD_NONE;
+        pix->colorspace = V4L2_COLORSPACE_SRGB;
+        pix->ycbcr_enc = V4L2_MAP_YCBCR_ENC_DEFAULT(pix->colorspace);
+        pix->quantization = V4L2_QUANTIZATION_FULL_RANGE;
+        memset(pix->reserved, 0x00, sizeof(pix->reserved));
+
+        for (i = 0; i < pix->num_planes; i++) {
+            bpl = pix->plane_fmt[i].bytesperline;
+
+            if ((bpl == 0) || (bpl / (fmt->depth[i] >> 3)) < pix->width)
+                pix->plane_fmt[i].bytesperline =
+                        (pix->width * fmt->depth[i]) >> 3;
+
+            if (pix->plane_fmt[i].sizeimage == 0) {
+                if ((i == 1) && (pix->pixelformat == V4L2_PIX_FMT_NV12 ||
+                         pix->pixelformat == V4L2_PIX_FMT_NV12M))
+                    pix->plane_fmt[i].sizeimage =
+                      (pix->width * (pix->height >> 1) * fmt->depth[i] >> 3);
+                else
+                    pix->plane_fmt[i].sizeimage =
+                        (pix->width * pix->height * fmt->depth[i] >> 3);
+            }
+        }
     }
 
-    if (pix->width > ISI_4K)
-		pix->width = ISI_4K;
-	if (pix->height > ISI_8K)
-		pix->height = ISI_8K;
-
-	pix->num_planes = fmt->memplanes;
-	pix->pixelformat = fmt->fourcc;
-	pix->field = V4L2_FIELD_NONE;
-	pix->colorspace = V4L2_COLORSPACE_SRGB;
-	pix->ycbcr_enc = V4L2_MAP_YCBCR_ENC_DEFAULT(pix->colorspace);
-	pix->quantization = V4L2_QUANTIZATION_FULL_RANGE;
-	memset(pix->reserved, 0x00, sizeof(pix->reserved));
-
-	for (i = 0; i < pix->num_planes; i++) {
-		bpl = pix->plane_fmt[i].bytesperline;
-
-		if ((bpl == 0) || (bpl / (fmt->depth[i] >> 3)) < pix->width)
-			pix->plane_fmt[i].bytesperline =
-					(pix->width * fmt->depth[i]) >> 3;
-
-		if (pix->plane_fmt[i].sizeimage == 0) {
-			if ((i == 1) && (pix->pixelformat == V4L2_PIX_FMT_NV12 ||
-					 pix->pixelformat == V4L2_PIX_FMT_NV12M))
-				pix->plane_fmt[i].sizeimage =
-				  (pix->width * (pix->height >> 1) * fmt->depth[i] >> 3);
-			else
-				pix->plane_fmt[i].sizeimage =
-					(pix->width * pix->height * fmt->depth[i] >> 3);
-		}
-	}
+    v4l2_subdev_free_pad_config(pad_cfg);
 
-	if (fmt->colplanes != fmt->memplanes) {
+    if (fmt->colplanes != fmt->memplanes) {
 		for (i = 1; i < fmt->colplanes; ++i) {
 			struct v4l2_plane_pix_format *plane = &pix->plane_fmt[i];
 
@@ -945,7 +952,7 @@ static int mxc_isi_cap_try_fmt_mplane(struct file *file, void *fh,
 		}
 	}
 
-	return 0;
+	return ret;
 }
 
 /* Update input frame size and formate  */
diff --git a/drivers/staging/media/imx/imx8-mipi-csi2-sam.c b/drivers/staging/media/imx/imx8-mipi-csi2-sam.c
index 06e9a5695e29..bab9751b2ae2 100644
--- a/drivers/staging/media/imx/imx8-mipi-csi2-sam.c
+++ b/drivers/staging/media/imx/imx8-mipi-csi2-sam.c
@@ -1129,6 +1129,7 @@ static int mipi_csis_set_fmt(struct v4l2_subdev *mipi_sd,
 	struct csis_pix_format const *csis_fmt;
 	struct media_pad *source_pad;
 	struct v4l2_subdev *sen_sd;
+    struct v4l2_subdev_pad_config *pad_cfg = NULL;
 	int ret;
 
 	/* Get remote source pad */
@@ -1145,8 +1146,15 @@ static int mipi_csis_set_fmt(struct v4l2_subdev *mipi_sd,
 		return -EINVAL;
 	}
 
+    if (format->which == V4L2_SUBDEV_FORMAT_TRY)
+    {
+        pad_cfg = v4l2_subdev_alloc_pad_config(sen_sd);
+        if (!pad_cfg)
+            return -ENOMEM;
+    }
+
 	format->pad = source_pad->index;
-	ret = v4l2_subdev_call(sen_sd, pad, set_fmt, NULL, format);
+	ret = v4l2_subdev_call(sen_sd, pad, set_fmt, pad_cfg, format);
 	if (ret < 0) {
 		v4l2_err(&state->sd, "%s, set sensor format fail\n", __func__);
 		return -EINVAL;
@@ -1162,9 +1170,15 @@ static int mipi_csis_set_fmt(struct v4l2_subdev *mipi_sd,
         }
         state->csis_fmt = csis_fmt;
     }
-    else if (!csis_fmt)
+    else
     {
-        return -EINVAL;
+        if (!csis_fmt)
+        {
+            v4l2_err(&state->sd, "%s, find csis format fail\n", __func__);
+            return -EINVAL;
+        }
+
+        v4l2_subdev_free_pad_config(pad_cfg);
     }
 
 	state->csis_fmt = csis_fmt;
-- 
2.17.1

