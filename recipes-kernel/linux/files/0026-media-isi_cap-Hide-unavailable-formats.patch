From 7b0ac1df1ded25a1f80b2eba1a8c4bc147cd583a Mon Sep 17 00:00:00 2001
From: Dennis Langenkamp <dennis.langenkamp@alliedvision.com>
Date: Mon, 3 Apr 2023 15:56:09 +0200
Subject: [PATCH 26/27] media: isi_cap: Hide unavailable formats

The isi capture driver now only enumerates formats that are supported by the connected subdevices. This is done probing all supported formats when the first time enum formats is called.
The set formats ioctls now also the format on the subdevices.
---
 drivers/staging/media/imx/imx8-isi-cap.c  | 362 +++++++++++++---------
 drivers/staging/media/imx/imx8-isi-core.h |   3 +
 2 files changed, 223 insertions(+), 142 deletions(-)

diff --git a/drivers/staging/media/imx/imx8-isi-cap.c b/drivers/staging/media/imx/imx8-isi-cap.c
index 4ef05854d859..2d0994340195 100644
--- a/drivers/staging/media/imx/imx8-isi-cap.c
+++ b/drivers/staging/media/imx/imx8-isi-cap.c
@@ -212,7 +212,7 @@ void mxc_isi_cap_frame_write_done(struct mxc_isi_dev *mxc_isi)
 		}
 
 		buf = list_first_entry(&isi_cap->out_discard,
-				       struct mxc_isi_buffer, list);
+		struct mxc_isi_buffer, list);
 		buf->v4l2_buf.sequence = isi_cap->frame_count;
 		mxc_isi_channel_set_outbuf(mxc_isi, buf);
 		list_move_tail(isi_cap->out_discard.next, &isi_cap->out_active);
@@ -227,7 +227,7 @@ void mxc_isi_cap_frame_write_done(struct mxc_isi_dev *mxc_isi)
 	vb2->state = VB2_BUF_STATE_ACTIVE;
 	list_move_tail(isi_cap->out_pending.next, &isi_cap->out_active);
 
-unlock:
+	unlock:
 	spin_unlock_irqrestore(&isi_cap->slock, flags);
 }
 EXPORT_SYMBOL_GPL(mxc_isi_cap_frame_write_done);
@@ -400,10 +400,10 @@ static int cap_vb2_start_streaming(struct vb2_queue *q, unsigned int count)
 	/* ISI channel output buffer 1 */
 	if (mxc_isi->discard_first_frame)
 		buf = list_first_entry(&isi_cap->out_discard,
-				       struct mxc_isi_buffer, list);
+	struct mxc_isi_buffer, list);
 	else
-		buf = list_first_entry(&isi_cap->out_pending,
-				       struct mxc_isi_buffer, list);
+	buf = list_first_entry(&isi_cap->out_pending,
+	struct mxc_isi_buffer, list);
 
 	buf->v4l2_buf.sequence = 0;
 	vb2 = &buf->v4l2_buf.vb2_buf;
@@ -440,14 +440,14 @@ static int cap_vb2_start_streaming(struct vb2_queue *q, unsigned int count)
 
 	return 0;
 
-disable:
+	disable:
 	mxc_isi_channel_disable(mxc_isi);
 
-err:
+	err:
 	spin_lock_irqsave(&isi_cap->slock, flags);
 	while (!list_empty(&isi_cap->out_active)) {
 		buf = list_entry(isi_cap->out_active.next,
-				 struct mxc_isi_buffer, list);
+		struct mxc_isi_buffer, list);
 		list_del_init(&buf->list);
 		if (buf->discard)
 			continue;
@@ -457,7 +457,7 @@ static int cap_vb2_start_streaming(struct vb2_queue *q, unsigned int count)
 
 	while (!list_empty(&isi_cap->out_pending)) {
 		buf = list_entry(isi_cap->out_pending.next,
-				 struct mxc_isi_buffer, list);
+		struct mxc_isi_buffer, list);
 		list_del_init(&buf->list);
 		vb2_buffer_done(&buf->v4l2_buf.vb2_buf, VB2_BUF_STATE_ERROR);
 	}
@@ -482,7 +482,7 @@ static void cap_vb2_stop_streaming(struct vb2_queue *q)
 
 	while (!list_empty(&isi_cap->out_active)) {
 		buf = list_entry(isi_cap->out_active.next,
-				 struct mxc_isi_buffer, list);
+		struct mxc_isi_buffer, list);
 		list_del_init(&buf->list);
 		if (buf->discard)
 			continue;
@@ -492,14 +492,14 @@ static void cap_vb2_stop_streaming(struct vb2_queue *q)
 
 	while (!list_empty(&isi_cap->out_pending)) {
 		buf = list_entry(isi_cap->out_pending.next,
-				 struct mxc_isi_buffer, list);
+		struct mxc_isi_buffer, list);
 		list_del_init(&buf->list);
 		vb2_buffer_done(&buf->v4l2_buf.vb2_buf, VB2_BUF_STATE_ERROR);
 	}
 
 	while (!list_empty(&isi_cap->out_discard)) {
 		buf = list_entry(isi_cap->out_discard.next,
-				 struct mxc_isi_buffer, list);
+		struct mxc_isi_buffer, list);
 		list_del_init(&buf->list);
 	}
 
@@ -719,25 +719,25 @@ static int isi_cap_fmt_init(struct mxc_isi_cap_dev *isi_cap)
 	struct mxc_isi_frame *src_f = &isi_cap->src_f;
 	struct v4l2_subdev_format src_fmt;
 	struct v4l2_subdev *src_sd;
-    struct media_pad *source_pad;
+	struct media_pad *source_pad;
 	int i, ret;
 
-    source_pad = mxc_isi_get_remote_source_pad(&isi_cap->sd);
-    if (!source_pad) {
-        v4l2_err(&isi_cap->sd,
-                 "%s, No remote pad found!\n", __func__);
-        return -EINVAL;
-    }
+	source_pad = mxc_isi_get_remote_source_pad(&isi_cap->sd);
+	if (!source_pad) {
+		v4l2_err(&isi_cap->sd,
+			 "%s, No remote pad found!\n", __func__);
+		return -EINVAL;
+	}
 
 
-    src_sd = mxc_get_remote_subdev(&isi_cap->sd, __func__);
+	src_sd = mxc_get_remote_subdev(&isi_cap->sd, __func__);
 	if (!src_sd) {
 		v4l2_err(&isi_cap->sd, "get remote subdev fail!\n");
 		return -EINVAL;
 	}
 
 	memset(&src_fmt, 0, sizeof(src_fmt));
-    src_fmt.pad = source_pad->index;
+	src_fmt.pad = source_pad->index;
 	src_fmt.which = V4L2_SUBDEV_FORMAT_ACTIVE;
 	ret = v4l2_subdev_call(src_sd, pad, get_fmt, NULL, &src_fmt);
 	if (ret < 0 && ret != -ENOIOCTLCMD) {
@@ -749,46 +749,46 @@ static int isi_cap_fmt_init(struct mxc_isi_cap_dev *isi_cap)
 		set_frame_bounds(dst_f, src_fmt.format.width, src_fmt.format.height);
 
 	if (!dst_f->fmt)
-    {
-        dst_f->fmt = &mxc_isi_out_formats[0];
-
-        memset(&src_fmt, 0, sizeof(src_fmt));
-        src_fmt.pad = source_pad->index;
-        src_fmt.which = V4L2_SUBDEV_FORMAT_ACTIVE;
-        src_fmt.format.code = dst_f->fmt->mbus_code;
-        src_fmt.format.width = dst_f->width;
-        src_fmt.format.height = dst_f->height;
-        ret = v4l2_subdev_call(src_sd, pad, set_fmt, NULL, &src_fmt);
-        if (ret < 0 && ret != -ENOIOCTLCMD) {
-            v4l2_err(&isi_cap->sd, "set remote fmt fail!\n");
-            return ret;
-        }
-
-        for (i = 0; i < dst_f->fmt->memplanes; i++) {
-            if (dst_f->bytesperline[i] == 0)
-                dst_f->bytesperline[i] = dst_f->width * dst_f->fmt->depth[i] >> 3;
-            if (dst_f->sizeimage[i] == 0)
-                dst_f->sizeimage[i] = dst_f->bytesperline[i] * dst_f->height;
-        }
-
-        v4l2_fill_pix_format_mplane(&isi_cap->pix,&src_fmt.format);
-        isi_cap->pix.num_planes = dst_f->fmt->memplanes;
-        isi_cap->pix.pixelformat = dst_f->fmt->fourcc;
-
-        for (i = 0; i < isi_cap->pix.num_planes; i++) {
-            isi_cap->pix.plane_fmt[i].bytesperline = dst_f->bytesperline[i];
-            isi_cap->pix.plane_fmt[i].sizeimage = dst_f->sizeimage[i];
-        }
-    }
-    else
-    {
-        for (i = 0; i < dst_f->fmt->memplanes; i++) {
-            if (dst_f->bytesperline[i] == 0)
-                dst_f->bytesperline[i] = dst_f->width * dst_f->fmt->depth[i] >> 3;
-            if (dst_f->sizeimage[i] == 0)
-                dst_f->sizeimage[i] = dst_f->bytesperline[i] * dst_f->height;
-        }
-    }
+	{
+		dst_f->fmt = &mxc_isi_out_formats[0];
+
+		memset(&src_fmt, 0, sizeof(src_fmt));
+		src_fmt.pad = source_pad->index;
+		src_fmt.which = V4L2_SUBDEV_FORMAT_ACTIVE;
+		src_fmt.format.code = dst_f->fmt->mbus_code;
+		src_fmt.format.width = dst_f->width;
+		src_fmt.format.height = dst_f->height;
+		ret = v4l2_subdev_call(src_sd, pad, set_fmt, NULL, &src_fmt);
+		if (ret < 0 && ret != -ENOIOCTLCMD) {
+			v4l2_err(&isi_cap->sd, "set remote fmt fail!\n");
+			return ret;
+		}
+
+		for (i = 0; i < dst_f->fmt->memplanes; i++) {
+			if (dst_f->bytesperline[i] == 0)
+				dst_f->bytesperline[i] = dst_f->width * dst_f->fmt->depth[i] >> 3;
+			if (dst_f->sizeimage[i] == 0)
+				dst_f->sizeimage[i] = dst_f->bytesperline[i] * dst_f->height;
+		}
+
+		v4l2_fill_pix_format_mplane(&isi_cap->pix,&src_fmt.format);
+		isi_cap->pix.num_planes = dst_f->fmt->memplanes;
+		isi_cap->pix.pixelformat = dst_f->fmt->fourcc;
+
+		for (i = 0; i < isi_cap->pix.num_planes; i++) {
+			isi_cap->pix.plane_fmt[i].bytesperline = dst_f->bytesperline[i];
+			isi_cap->pix.plane_fmt[i].sizeimage = dst_f->sizeimage[i];
+		}
+	}
+	else
+	{
+		for (i = 0; i < dst_f->fmt->memplanes; i++) {
+			if (dst_f->bytesperline[i] == 0)
+				dst_f->bytesperline[i] = dst_f->width * dst_f->fmt->depth[i] >> 3;
+			if (dst_f->sizeimage[i] == 0)
+				dst_f->sizeimage[i] = dst_f->bytesperline[i] * dst_f->height;
+		}
+	}
 
 	if (!src_f->fmt)
 		memcpy(src_f, dst_f, sizeof(*dst_f));
@@ -867,7 +867,7 @@ static int mxc_isi_capture_release(struct file *file)
 	    atomic_dec_and_test(&mxc_isi->usage_count))
 		mxc_isi_channel_deinit(mxc_isi);
 
-label:
+	label:
 	mutex_lock(&mxc_isi->lock);
 	mxc_isi->cap_enabled = false;
 	mutex_unlock(&mxc_isi->lock);
@@ -905,16 +905,72 @@ static int mxc_isi_cap_querycap(struct file *file, void *priv,
 }
 
 static int mxc_isi_cap_enum_fmt(struct file *file, void *priv,
-				       struct v4l2_fmtdesc *f)
+				struct v4l2_fmtdesc *f)
 {
 	struct mxc_isi_cap_dev *isi_cap = video_drvdata(file);
 	struct mxc_isi_fmt *fmt;
 
 	dev_dbg(&isi_cap->pdev->dev, "%s\n", __func__);
-	if (f->index >= (int)mxc_isi_out_formats_size)
+
+
+	if (isi_cap->avail_fmts == NULL)
+	{
+		int i,j;
+		struct v4l2_subdev_state *sd_state;
+		struct media_pad *source_pad;
+		struct v4l2_subdev *src_sd;
+
+		isi_cap->avail_fmts = kcalloc(mxc_isi_out_formats_size,sizeof(*isi_cap->avail_fmts),GFP_KERNEL);
+
+		if (!isi_cap->avail_fmts)
+		{
+			return -ENOMEM;
+		}
+
+		source_pad = mxc_isi_get_remote_source_pad(&isi_cap->sd);
+		if (!source_pad) {
+			v4l2_err(&isi_cap->sd,
+				 "%s, No remote pad found!\n", __func__);
+			return -EINVAL;
+		}
+
+		src_sd = mxc_get_remote_subdev(&isi_cap->sd, __func__);
+		if (!src_sd)
+			return -EINVAL;
+
+		sd_state = v4l2_subdev_alloc_state(src_sd);
+
+		if (!sd_state)
+		{
+			return -ENOMEM;
+		}
+
+		for (i = 0,j = 0;i < mxc_isi_out_formats_size;i++)
+		{
+			int ret;
+			struct v4l2_subdev_format subdev_fmt = {0};
+			u32 mbus_code = mxc_isi_out_formats[i].mbus_code;
+
+			subdev_fmt.pad = source_pad->index;
+			subdev_fmt.which = V4L2_SUBDEV_FORMAT_TRY;
+			subdev_fmt.format.code = mbus_code;
+			ret = v4l2_subdev_call(src_sd, pad, set_fmt, sd_state, &subdev_fmt);
+			if (!ret && subdev_fmt.format.code == mbus_code)
+			{
+				isi_cap->avail_fmts[j] = &mxc_isi_out_formats[i];
+				j++;
+			}
+		}
+
+		isi_cap->avail_fmts_cnt = j;
+
+		v4l2_subdev_free_state(sd_state);
+	}
+
+	if (f->index >= (int)isi_cap->avail_fmts_cnt)
 		return -EINVAL;
 
-	fmt = &mxc_isi_out_formats[f->index];
+	fmt = isi_cap->avail_fmts[f->index];
 
 	strncpy(f->description, fmt->name, sizeof(f->description) - 1);
 
@@ -958,14 +1014,14 @@ static int mxc_isi_cap_try_fmt_mplane(struct file *file, void *fh,
 {
 	struct mxc_isi_cap_dev *isi_cap = video_drvdata(file);
 	struct v4l2_pix_format_mplane *pix = &f->fmt.pix_mp;
-    struct v4l2_subdev_format src_fmt;
-    struct v4l2_subdev_state *sd_state;
-    struct media_pad *source_pad;
-    struct v4l2_subdev *src_sd;
+	struct v4l2_subdev_format src_fmt;
+	struct v4l2_subdev_state *sd_state;
+	struct media_pad *source_pad;
+	struct v4l2_subdev *src_sd;
 	struct mxc_isi_fmt *fmt;
 	u32 bpl,min_bpl;
 	int i;
-    int ret = 0;
+	int ret = 0;
 
 	dev_dbg(&isi_cap->pdev->dev, "%s\n", __func__);
 
@@ -981,74 +1037,75 @@ static int mxc_isi_cap_try_fmt_mplane(struct file *file, void *fh,
 	}
 
 
-    source_pad = mxc_isi_get_remote_source_pad(&isi_cap->sd);
-    if (!source_pad) {
-        v4l2_err(&isi_cap->sd,
-                 "%s, No remote pad found!\n", __func__);
-        return -EINVAL;
-    }
-
-    src_sd = mxc_get_remote_subdev(&isi_cap->sd, __func__);
-    if (!src_sd)
-        return -EINVAL;
-
-    sd_state = v4l2_subdev_alloc_state(src_sd);
-    if (!sd_state)
-        return -ENOMEM;
-
-    src_fmt.pad = source_pad->index;
-    src_fmt.which = V4L2_SUBDEV_FORMAT_TRY;
-    src_fmt.format.code = fmt->mbus_code;
-    v4l2_fill_mbus_format_mplane(&src_fmt.format,pix);
-    ret = v4l2_subdev_call(src_sd, pad, set_fmt, sd_state, &src_fmt);
-    if (ret < 0 && ret != -ENOIOCTLCMD)
-    {
-        v4l2_err(&isi_cap->sd, "try remote fmt fail!\n");
-    }
-    else
-    {
-        /*
-         * The bit width in CHNL_IMG_CFG[HEIGHT/WIDTH] is 13, so the maximum
-         * theorical value for image width/height should be 8K, but due to ISI
-         * line buffer size limitation, the maximum value is 4K
-         *
-         * For efficient data transmission, the minimum data width should be
-         * 16(128/8)
-         */
-	if (pix->pixelformat == V4L2_PIX_FMT_CUSTOM)
-		v4l_bound_align_image(&pix->width, 16, ISI_4K * 3, fmt->align,
+	source_pad = mxc_isi_get_remote_source_pad(&isi_cap->sd);
+	if (!source_pad) {
+		v4l2_err(&isi_cap->sd,
+			 "%s, No remote pad found!\n", __func__);
+		return -EINVAL;
+	}
+
+	src_sd = mxc_get_remote_subdev(&isi_cap->sd, __func__);
+	if (!src_sd)
+		return -EINVAL;
+
+	sd_state = v4l2_subdev_alloc_state(src_sd);
+	if (!sd_state)
+		return -ENOMEM;
+
+	src_fmt.pad = source_pad->index;
+	src_fmt.which = V4L2_SUBDEV_FORMAT_TRY;
+	src_fmt.format.code = fmt->mbus_code;
+	v4l2_fill_mbus_format_mplane(&src_fmt.format,pix);
+	ret = v4l2_subdev_call(src_sd, pad, set_fmt, sd_state, &src_fmt);
+	if (ret < 0 && ret != -ENOIOCTLCMD) {
+		v4l2_err(&isi_cap->sd, "try remote fmt fail!\n");
+	} else {
+		if (fmt->mbus_code == src_fmt.format.code) {
+			v4l2_fill_pix_format_mplane(pix,&src_fmt.format);
+		}
+
+		/*
+		 * The bit width in CHNL_IMG_CFG[HEIGHT/WIDTH] is 13, so the maximum
+		 * theorical value for image width/height should be 8K, but due to ISI
+		 * line buffer size limitation, the maximum value is 4K
+		 *
+		 * For efficient data transmission, the minimum data width should be
+		 * 16(128/8)
+		 */
+		if (pix->pixelformat == V4L2_PIX_FMT_CUSTOM)
+			v4l_bound_align_image(&pix->width, 16, ISI_4K * 3, fmt->align,
 					      &pix->height, 16, ISI_8K, 0, 0);
-	else
+		else
         	v4l_bound_align_image(&pix->width, 16, ISI_8K, fmt->align,
-                              &pix->height, 16, ISI_8K, 0, 0);
-
-        pix->num_planes = fmt->memplanes;
-        pix->pixelformat = fmt->fourcc;
-        pix->field = V4L2_FIELD_NONE;
-        pix->colorspace = V4L2_COLORSPACE_SRGB;
-        pix->ycbcr_enc = V4L2_MAP_YCBCR_ENC_DEFAULT(pix->colorspace);
-        pix->quantization = V4L2_QUANTIZATION_FULL_RANGE;
-        memset(pix->reserved, 0x00, sizeof(pix->reserved));
-
-        for (i = 0; i < fmt->colplanes; i++) {
-            bpl = pix->plane_fmt[i].bytesperline;
-            min_bpl = (pix->width * fmt->depth[i]) >> 3;
-
-            // The size of LINE_PITCH in CHNL_OUT_BUF_PITCH is 16bit
-            // So the maximum value here must be U16_MAX
-            pix->plane_fmt[i].bytesperline = clamp(bpl,min_bpl,U16_MAX);
-
-            if ((i == 1) && (pix->pixelformat == V4L2_PIX_FMT_NV12 ||
-                             pix->pixelformat == V4L2_PIX_FMT_NV12M))
-                pix->plane_fmt[i].sizeimage = (pix->plane_fmt[i].bytesperline * (pix->height >> 1));
-            else
-                pix->plane_fmt[i].sizeimage = (pix->plane_fmt[i].bytesperline * pix->height);
-        }
-    }
-
-    v4l2_subdev_free_state(sd_state);
-
-    if (fmt->colplanes != fmt->memplanes) {
+					      &pix->height, 16, ISI_8K, 0, 0);
+
+		pix->num_planes = fmt->memplanes;
+		pix->pixelformat = fmt->fourcc;
+		pix->field = V4L2_FIELD_NONE;
+		pix->colorspace = V4L2_COLORSPACE_SRGB;
+		pix->ycbcr_enc = V4L2_MAP_YCBCR_ENC_DEFAULT(pix->colorspace);
+		pix->quantization = V4L2_QUANTIZATION_FULL_RANGE;
+		memset(pix->reserved, 0x00, sizeof(pix->reserved));
+
+		for (i = 0; i < fmt->colplanes; i++) {
+			bpl = pix->plane_fmt[i].bytesperline;
+			min_bpl = (pix->width * fmt->depth[i]) >> 3;
+
+			// The size of LINE_PITCH in CHNL_OUT_BUF_PITCH is 16bit
+			// So the maximum value here must be U16_MAX
+			pix->plane_fmt[i].bytesperline = clamp(bpl,min_bpl,U16_MAX);
+
+			if ((i == 1) && (pix->pixelformat == V4L2_PIX_FMT_NV12 ||
+					 pix->pixelformat == V4L2_PIX_FMT_NV12M))
+				pix->plane_fmt[i].sizeimage = (pix->plane_fmt[i].bytesperline * (pix->height >> 1));
+			else
+				pix->plane_fmt[i].sizeimage = (pix->plane_fmt[i].bytesperline * pix->height);
+		}
+	}
+
+	v4l2_subdev_free_state(sd_state);
+
+	if (fmt->colplanes != fmt->memplanes) {
 		for (i = 1; i < fmt->colplanes; ++i) {
 			struct v4l2_plane_pix_format *plane = &pix->plane_fmt[i];
 
@@ -1106,7 +1163,7 @@ static int mxc_isi_source_fmt_init(struct mxc_isi_cap_dev *isi_cap)
 	}
 
 	/* Pixel link master will transfer format to RGB32 or YUV32 */
-    	src_f->fmt = dst_f->fmt;
+	src_f->fmt = dst_f->fmt;
 	if (dst_f->fmt->fourcc == V4L2_PIX_FMT_CUSTOM)
 		set_frame_bounds(src_f, src_fmt.format.width / 3, src_fmt.format.height);
 	else
@@ -1131,6 +1188,9 @@ static int mxc_isi_cap_s_fmt_mplane(struct file *file, void *priv,
 	struct v4l2_pix_format_mplane *pix = &f->fmt.pix_mp;
 	struct mxc_isi_frame *dst_f = &isi_cap->dst_f;
 	struct mxc_isi_fmt *fmt;
+	struct media_pad *source_pad;
+	struct v4l2_subdev *src_sd;
+	struct v4l2_subdev_format src_fmt = { 0 };
 	int bpl;
 	int i, ret;
 
@@ -1181,7 +1241,25 @@ static int mxc_isi_cap_s_fmt_mplane(struct file *file, void *priv,
 	else
 		set_frame_bounds(dst_f, pix->width, pix->height);
 
-	return 0;
+
+	source_pad = mxc_isi_get_remote_source_pad(&isi_cap->sd);
+	if (!source_pad) {
+		v4l2_err(&isi_cap->sd,
+			 "%s, No remote pad found!\n", __func__);
+		return -EINVAL;
+	}
+
+	src_sd = mxc_get_remote_subdev(&isi_cap->sd, __func__);
+	if (!src_sd)
+		return -EINVAL;
+
+	src_fmt.pad = source_pad->index;
+	src_fmt.format.code = fmt->mbus_code;
+	src_fmt.which = V4L2_SUBDEV_FORMAT_ACTIVE;
+	v4l2_fill_mbus_format_mplane(&src_fmt.format,pix);
+	ret = v4l2_subdev_call(src_sd, pad, set_fmt, NULL, &src_fmt);
+
+	return ret;
 }
 
 static int mxc_isi_config_parm(struct mxc_isi_cap_dev *isi_cap)
@@ -1260,7 +1338,7 @@ static int mxc_isi_cap_streamon(struct file *file, void *priv,
 	}
 
 	return 0;
-power:
+	power:
 	v4l2_subdev_call(src_sd, core, s_power, 0);
 	return ret;
 }
@@ -1837,11 +1915,11 @@ static int mxc_isi_register_cap_device(struct mxc_isi_cap_dev *isi_cap,
 
 	return 0;
 
-err_ctrl_free:
+	err_ctrl_free:
 	mxc_isi_ctrls_delete(isi_cap);
-err_me_cleanup:
+	err_me_cleanup:
 	media_entity_cleanup(&vdev->entity);
-err_free_ctx:
+	err_free_ctx:
 	return ret;
 }
 
diff --git a/drivers/staging/media/imx/imx8-isi-core.h b/drivers/staging/media/imx/imx8-isi-core.h
index e035ab7f7b6c..3ddf4d7a888a 100644
--- a/drivers/staging/media/imx/imx8-isi-core.h
+++ b/drivers/staging/media/imx/imx8-isi-core.h
@@ -330,6 +330,9 @@ struct mxc_isi_cap_dev {
 	size_t     discard_size[MXC_MAX_PLANES];
 	void       *discard_buffer[MXC_MAX_PLANES];
 	dma_addr_t discard_buffer_dma[MXC_MAX_PLANES];
+
+	const struct mxc_isi_fmt **avail_fmts;
+	size_t  avail_fmts_cnt;
 };
 
 struct mxc_isi_dev {
-- 
2.40.0

